font = 'Bahnschrift'
p <- ggplot(Top_Outliers, aes(x = reorder(SYMBOL, Average_Value), y = Average_Value)) +
scale_y_continuous(position = "right", limits = c(-2, 2), breaks = c(-2,-1,0,1,2)) +
geom_bar(stat = "identity", position = "dodge", aes(fill = Average_Value > 0)) +
scale_fill_manual(values = c("#2381D0", "#DA4948")) +
theme(
text = element_text(family = font),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line('grey', size = 0.2),
panel.grid.minor.y = element_blank(),
panel.background = element_rect(fill = "white"),
axis.line = element_line(color = "black", size = 0.5),
plot.title = element_text(hjust = 0.5, size = 15, face = 'bold')
) +
geom_hline(yintercept = y_intercepts, color = "grey", linetype = "dashed", size = 0.2, inherit.aes = FALSE) +
labs(title = plot_title, x = "Genes", y = "Stat.Mean") +
coord_flip() +
theme(legend.position = "none")
file_name <- paste0(output_dir_gage_pathway, basename(file_path), "_Differential_Plot.svg")
ggsave(file_name, plot = p, scale = 1, width = 5, height = plot_height, units = "in", dpi = 300)
return(p)
}
# Process all files in the list
plots <- lapply(file_list, process_gene_data)
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
library(affy)
library(oligo)
library(statmod)
library(limma)
library(gage)
library(pd.clariom.s.human)
library(pd.hg.u133.plus.2)
library(oligoData)
library(affycoretools)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(openxlsx)
library(EnhancedVolcano)
library(org.Hs.eg.db)
library(extrafont)
library(extrafontdb)
library(tidyr)
library(dplyr)
library(svglite)
wd <- getwd()
font_import(paths = wd, pattern = "BAHNSCHRIFT", prompt = FALSE)
# Convert to format for your volcano plot
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
View(data)
View(data)
rownames(data) <- data$SeqName
View(data)
View(data)
data <- subset(out_clariom,select=c(2, 5:ncol(out_clariom)))
data_sub <- subset(data,select=c(2, 5:ncol(data)))
View(data_sub)
data_sub <- aggregate(. ~ seqName, data_sub=data.frame(
seqName=rownames(data_sub),
as.data.frame(data_sub)
), mean)
View(data_sub)
View(data_sub)
View(data_sub)
groupA <- colnames(gene_expression_data)[grepl("^1A", colnames(gene_expression_data))]
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
#Perform ANOVA for each gene by directly accessing columns for groupA and groupB
anova_results <- apply(gene_expression_data, 1, function(gene_expr) {
# Extract the gene expression for each group
groupA_expr <- gene_expr[groupA]
groupB_expr <- gene_expr[groupB]
# Perform an ANOVA (or you can use a t-test depending on the data)
aov_result <- aov(c(groupA_expr, groupB_expr) ~ rep(c("A", "B"), times = c(length(groupA), length(groupB))))
# Extract the p-value for the group comparison
p_value <- summary(aov_result)[[1]]["Group", "Pr(>F)"]
return(p_value)
})
#Perform ANOVA for each gene by directly accessing columns for groupA and groupB
anova_results <- apply(data, 1, function(gene_expr) {
# Extract the gene expression for each group
groupA_expr <- gene_expr[groupA]
groupB_expr <- gene_expr[groupB]
# Perform an ANOVA (or you can use a t-test depending on the data)
aov_result <- aov(c(groupA_expr, groupB_expr) ~ rep(c("A", "B"), times = c(length(groupA), length(groupB))))
# Extract the p-value for the group comparison
p_value <- summary(aov_result)[[1]]["Group", "Pr(>F)"]
return(p_value)
})
shape(data)
vars(data)
head(data)
header(data)
head(data:20)
print(data)
View(data)
#Perform ANOVA for each gene by directly accessing columns for groupA and groupB
anova_results <- apply(data, 1, function(gene_expr) {
# Extract the gene expression for each group
groupA_expr <- gene_expr[groupA]
groupB_expr <- gene_expr[groupB]
# Perform an ANOVA (or you can use a t-test depending on the data)
aov_result <- aov(c(groupA_expr, groupB_expr) ~ rep(c("A", "B"), times = c(length(groupA), length(groupB))))
# Extract the p-value for the group comparison
p_value <- summary(aov_result)[[1]]["Group", "Pr(>F)"]
return(p_value)
})
# Perform ANOVA for each gene by directly accessing columns for groupA and groupB
anova_results <- apply(data, 1, function(gene_expr) {
# Extract the gene expression for each group
groupA_expr <- gene_expr[groupA]
groupB_expr <- gene_expr[groupB]
# Check if both groups have more than one unique value and are not all NAs
if (length(unique(groupA_expr)) > 1 && length(unique(groupB_expr)) > 1 &&
!any(is.na(groupA_expr)) && !any(is.na(groupB_expr))) {
# Perform ANOVA (or you can use a t-test depending on the data)
aov_result <- aov(c(groupA_expr, groupB_expr) ~ rep(c("A", "B"), times = c(length(groupA), length(groupB))))
# Extract the p-value for the group comparison
p_value <- summary(aov_result)[[1]]["Group", "Pr(>F)"]
} else {
# If one of the groups has no variation or contains NA, return NA for p-value
p_value <- NA
}
return(p_value)
})
# Combine results into a dataframe
anova_results_df <- data.frame(
Gene = rownames(gene_expression_data),
P_value = anova_results
)
# Combine results into a dataframe
anova_results_df <- data.frame(
Gene = rownames(data),
P_value = anova_results
)
View(anova_results_df)
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
results <- do.call(rbind, apply(data, 1, function(gene_expr) {
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Calculate fold change directly from difference since data is normalized
logFC <- mean(groupB_expr) - mean(groupA_expr)
# Perform t-test
t_result <- t.test(groupB_expr, groupA_expr)
return(c(logFC = logFC, P.Value = t_result$p.value))
}))
# Make sure rownames are set correctly first
if(!"SeqID" %in% colnames(data)) {
stop("No SeqID column found")
}
rownames(data) <- data$SeqID
data <- data[, !colnames(data) %in% "SeqID"]
View(data)
View(data)
rownames(data) <- data$Name
data <- data[, !colnames(data) %in% "SeqID"]
# Convert to format for your volcano plot
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
# Convert to format for your volcano plot
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
# Make sure rownames are set correctly first
if(!"SeqID" %in% colnames(data)) {
stop("No SeqID column found")
}
rownames(data) <- data$Name
data <- data[, !colnames(data) %in% "SeqName"]
View(data)
# Convert to format for your volcano plot
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
View(data)
# Make sure rownames are set correctly first
if(!"SeqName" %in% colnames(data)) {
stop("No SeqName column found")
}
rownames(data) <- data$SeqName
data$SYMBOL <- make.unique(data$SeqName)
rownames(data) <- data$SYMBOL
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL")]
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
results <- do.call(rbind, apply(data, 1, function(gene_expr) {
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Calculate fold change directly from difference since data is normalized
logFC <- mean(groupB_expr) - mean(groupA_expr)
# Perform t-test
t_result <- t.test(groupB_expr, groupA_expr)
return(c(logFC = logFC, P.Value = t_result$p.value))
}))
View(data)
View(data)
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "SeqCode")]
View(data)
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "Seqcode")]
View(data)
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
results <- do.call(rbind, apply(data, 1, function(gene_expr) {
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Calculate fold change directly from difference since data is normalized
logFC <- mean(groupB_expr) - mean(groupA_expr)
# Perform t-test
t_result <- t.test(groupB_expr, groupA_expr)
return(c(logFC = logFC, P.Value = t_result$p.value))
}))
print(groupA)
print(groupB)
print(dim(data))
print(str(data))
results <- list()
for(i in 1:nrow(data)) {
gene_expr <- data[i,]
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Check for NA values
if(!any(is.na(groupA_expr)) && !any(is.na(groupB_expr)) &&
length(groupA_expr) > 1 && length(groupB_expr) > 1) {
logFC <- mean(groupB_expr) - mean(groupA_expr)
t_result <- t.test(groupB_expr, groupA_expr)
p_value <- t_result$p.value
} else {
logFC <- NA
p_value <- NA
}
results[[i]] <- c(logFC = logFC, P.Value = p_value)
}
results_matrix <- do.call(rbind, results)
topTable <- data.frame(
SeqID = rownames(data),
logFC = results_matrix[, "logFC"],
P.Value = results_matrix[, "P.Value"]
)
View(topTable)
has_ggalt <- ! is(try(find.package("ggalt")), "try-error")
topTable <- na.omit(topTable)
topTable$SYMBOL <- make.unique(topTable$SYMBOL)
View(topTable)
# Convert to format for your volcano plot
data <- read.xlsx('C:/Users/UVict/Documents/Microarray_Test/normalized_intensites_filtered.xlsx')
data$SYMBOL <- make.unique(data$SeqName)
rownames(data) <- data$SYMBOL
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "Seqcode")]
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
print(groupA)
print(groupB)
print(dim(data))
print(str(data))
results <- list()
for(i in 1:nrow(data)) {
gene_expr <- data[i,]
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Check for NA values
if(!any(is.na(groupA_expr)) && !any(is.na(groupB_expr)) &&
length(groupA_expr) > 1 && length(groupB_expr) > 1) {
logFC <- mean(groupB_expr) - mean(groupA_expr)
t_result <- t.test(groupB_expr, groupA_expr)
p_value <- t_result$p.value
} else {
logFC <- NA
p_value <- NA
}
results[[i]] <- c(logFC = logFC, P.Value = p_value)
}
results_matrix <- do.call(rbind, results)
topTable <- data.frame(
SYMBOL = rownames(data),
logFC = results_matrix[, "logFC"],
P.Value = results_matrix[, "P.Value"]
)
has_ggalt <- ! is(try(find.package("ggalt")), "try-error")
topTable <- na.omit(topTable)
topTable$SYMBOL <- make.unique(topTable$SYMBOL)
topTable$GeneName <- topTable$SYMBOL
rownames(topTable) <- topTable$SYMBOL
EVp <- EnhancedVolcano(topTable,
lab = topTable$SYMBOL,
x = 'logFC',
y = 'P.Value',
title = paste0(EXP_column_cla, " vs ", WT_column_cla),
subtitle = 'Differential Gene Expression',
legendPosition = 'Middle',
pCutoff = 0.055,
FCcutoff = 0.8,
pointSize = 3.0,
labSize = 4.0,
ylim = 0.05,
col = c('#D0D5DC', '#60B8AA', '#006199', '#DA4948'),
xlim = c(-5, 5),
titleLabSize = 25) +
theme(
plot.title = element_text(size = 25, hjust = 0.5, family = "Bahnschrift"),
plot.subtitle = element_text(size = 20, hjust = 0.5, family = "Bahnschrift"),
axis.title = element_text(family = "Bahnschrift"),
axis.text = element_text(family = "Bahnschrift"),
legend.title = element_text(family = "Bahnschrift"),
legend.text = element_text(family = "Bahnschrift")
)
groupA_Name <- "1A"
groupB_Name <- "2B"
EVp <- EnhancedVolcano(topTable,
lab = topTable$SYMBOL,
x = 'logFC',
y = 'P.Value',
title = paste0(groupA_Name, " vs ", groupB_Name),
subtitle = 'Differential Gene Expression',
legendPosition = 'Middle',
pCutoff = 0.055,
FCcutoff = 0.8,
pointSize = 3.0,
labSize = 4.0,
ylim = 0.05,
col = c('#D0D5DC', '#60B8AA', '#006199', '#DA4948'),
xlim = c(-5, 5),
titleLabSize = 25) +
theme(
plot.title = element_text(size = 25, hjust = 0.5, family = "Bahnschrift"),
plot.subtitle = element_text(size = 20, hjust = 0.5, family = "Bahnschrift"),
axis.title = element_text(family = "Bahnschrift"),
axis.text = element_text(family = "Bahnschrift"),
legend.title = element_text(family = "Bahnschrift"),
legend.text = element_text(family = "Bahnschrift")
)
EVp
#Input directory for Cel files
input_dir = "C:/Users/UVict/Documents/Microarray_Test/"
#Load additional fonts for pretty plots
loadfonts(device = "win")
#Set output folder for additional results
output_dir_standard = paste0(input_dir, "/Standard_Analysis")
output_dir_gage = paste0(input_dir, "/GAGE_Analysis")
dir.create(output_dir_standard)
dir.create(output_dir_gage)
#Reads previously generated normalized data
normData <- read.xlsx(paste0(input_dir, "/normalized_intensites_filtered.xlsx"))
normData$SYMBOL <- normData$X1
normData <- normData[,c(ncol(normData), 1:(ncol(normData)-1))]
normData$X1 <- NULL
View(normData)
#Reads previously generated normalized data
normData <- read.xlsx(paste0(input_dir, "/normalized_intensites_filtered.xlsx"))
View(normData)
View(normData)
data$SYMBOL <- make.unique(data$SeqName)
#Reads previously generated normalized data
Data <- read.xlsx(paste0(input_dir, "/normalized_intensites_filtered.xlsx"))
#Reads previously generated normalized data
data <- read.xlsx(paste0(input_dir, "/normalized_intensites_filtered.xlsx"))
data$SYMBOL <- make.unique(data$SeqName)
rownames(data) <- data$SYMBOL
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "Seqcode")]
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
groupA_Name <- "1A"
groupB_Name <- "2B"
print(groupA)
print(groupB)
print(dim(data))
print(str(data))
results <- list()
for(i in 1:nrow(data)) {
gene_expr <- data[i,]
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Check for NA values
if(!any(is.na(groupA_expr)) && !any(is.na(groupB_expr)) &&
length(groupA_expr) > 1 && length(groupB_expr) > 1) {
logFC <- mean(groupB_expr) - mean(groupA_expr)
t_result <- t.test(groupB_expr, groupA_expr)
p_value <- t_result$p.value
} else {
logFC <- NA
p_value <- NA
}
results[[i]] <- c(logFC = logFC, P.Value = p_value)
}
results_matrix <- do.call(rbind, results)
topTable <- data.frame(
SYMBOL = rownames(data),
logFC = results_matrix[, "logFC"],
P.Value = results_matrix[, "P.Value"]
)
has_ggalt <- ! is(try(find.package("ggalt")), "try-error")
topTable <- na.omit(topTable)
topTable$SYMBOL <- make.unique(topTable$SYMBOL)
topTable$GeneName <- topTable$SYMBOL
rownames(topTable) <- topTable$SYMBOL
EVp <- EnhancedVolcano(topTable,
lab = topTable$SYMBOL,
x = 'logFC',
y = 'P.Value',
title = paste0(groupA_Name, " vs ", groupB_Name),
subtitle = 'Differential Gene Expression',
legendPosition = 'Middle',
pCutoff = 0.055,
FCcutoff = 0.8,
pointSize = 3.0,
labSize = 4.0,
ylim = 0.05,
col = c('#D0D5DC', '#60B8AA', '#006199', '#DA4948'),
xlim = c(-5, 5),
titleLabSize = 25) +
theme(
plot.title = element_text(size = 25, hjust = 0.5, family = "Bahnschrift"),
plot.subtitle = element_text(size = 20, hjust = 0.5, family = "Bahnschrift"),
axis.title = element_text(family = "Bahnschrift"),
axis.text = element_text(family = "Bahnschrift"),
legend.title = element_text(family = "Bahnschrift"),
legend.text = element_text(family = "Bahnschrift")
)
EVp
ggsave(paste0(output_dir_standard, "/EnhancedVolcanoPlot_", groupA_Name, "vs", groupB_Namem, ".png"), width = 7, height = 10)
ggsave(paste0(output_dir_standard, "/EnhancedVolcanoPlot_", groupA_Name, "vs", groupB_Name, ".png"), width = 7, height = 10)
View(topTable)
write.csv(topTable, paste0(output_dir_standard, "/Differential_GeneExp_", experiment_setup , ".csv"))
write.csv(topTable, (paste0(output_dir_standard, "/DifGeneExp_", groupA_Name, "_vs_", groupB_Name, ".csv")))
topTable%%order_by(logFC)
topTable%%order_by(topTable, logFC)
topTable <- order_by(topTable, logFC)
topTable <- data.frame(
SYMBOL = rownames(data),
logFC = results_matrix[, "logFC"],
P.Value = results_matrix[, "P.Value"],
sort.by="logFC"
)
topTable <- na.omit(topTable)
topTable$SYMBOL <- make.unique(topTable$SYMBOL)
topTable$GeneName <- topTable$SYMBOL
rownames(topTable) <- topTable$SYMBOL
View(topTable)
topTable <- topTable(sort.by="logFC")
topTable <- topTable[order(abs(topTable$logFC), decreasing=TRUE), ]
View(topTable)
write.csv(topTable, (paste0(output_dir_standard, "/DifGeneExp_", groupA_Name, "_vs_", groupB_Name, ".csv")))
write.csv(topTable, (paste0(output_dir_standard, "/DifGeneExp_", groupA_Name, "_vs_", groupB_Name, ".csv")))
data$SYMBOL <- make.unique(data$SeqName)
rownames(data) <- data$SYMBOL
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "Seqcode")]
data$SYMBOL <- make.unique(data$SeqName)
#Reads previously generated normalized data
data <- read.xlsx(paste0(input_dir, "/normalized_intensites_filtered.xlsx"))
data$SYMBOL <- make.unique(data$SeqName)
rownames(data) <- data$SYMBOL
data <- data[, !colnames(data) %in% c("SeqID", "SYMBOL", "SeqName", "Seqcode")]
groupA <- colnames(data)[grepl("^1A", colnames(data))]
groupB <- colnames(data)[grepl("^2B", colnames(data))]
groupA_Name <- "1A"
groupB_Name <- "2B"
print(groupA)
print(groupB)
print(dim(data))
print(str(data))
results <- list()
#Runs Welch's t-test so its fine for unequal data lengths
for(i in 1:nrow(data)) {
gene_expr <- data[i,]
groupA_expr <- as.numeric(gene_expr[groupA])
groupB_expr <- as.numeric(gene_expr[groupB])
# Check for NA values
if(!any(is.na(groupA_expr)) && !any(is.na(groupB_expr)) &&
length(groupA_expr) > 1 && length(groupB_expr) > 1) {
logFC <- mean(groupB_expr) - mean(groupA_expr)
t_result <- t.test(groupB_expr, groupA_expr)
p_value <- t_result$p.value
} else {
logFC <- NA
p_value <- NA
}
results[[i]] <- c(logFC = logFC, P.Value = p_value)
}
results_matrix <- do.call(rbind, results)
topTable <- data.frame(
SYMBOL = rownames(data),
logFC = results_matrix[, "logFC"],
P.Value = results_matrix[, "P.Value"]
)
has_ggalt <- ! is(try(find.package("ggalt")), "try-error")
topTable <- na.omit(topTable)
topTable$SYMBOL <- make.unique(topTable$SYMBOL)
#topTable$GeneName <- topTable$SYMBOL
rownames(topTable) <- topTable$SYMBOL
topTable <- topTable[order(abs(topTable$logFC), decreasing=TRUE), ]
EVp <- EnhancedVolcano(topTable,
lab = topTable$SYMBOL,
x = 'logFC',
y = 'P.Value',
title = paste0(groupA_Name, " vs ", groupB_Name),
subtitle = 'Differential Gene Expression',
legendPosition = 'Middle',
pCutoff = 0.055,
FCcutoff = 0.8,
pointSize = 3.0,
labSize = 4.0,
ylim = 0.05,
col = c('#D0D5DC', '#60B8AA', '#006199', '#DA4948'),
xlim = c(-5, 5),
titleLabSize = 25) +
theme(
plot.title = element_text(size = 25, hjust = 0.5, family = "Bahnschrift"),
plot.subtitle = element_text(size = 20, hjust = 0.5, family = "Bahnschrift"),
axis.title = element_text(family = "Bahnschrift"),
axis.text = element_text(family = "Bahnschrift"),
legend.title = element_text(family = "Bahnschrift"),
legend.text = element_text(family = "Bahnschrift")
)
EVp
write.csv(topTable, (paste0(output_dir_standard, "/DifGeneExp_", groupA_Name, "_vs_", groupB_Name, ".csv")))
ggsave(paste0(output_dir_standard, "/EnhancedVolcanoPlot_", groupA_Name, "_vs_", groupB_Name, ".png"), width = 7, height = 10)
